generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  FREE
  PRO
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  PAST_DUE
  CANCELED
}

model User {
  id        String   @id
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile        Profile?
  favorites      FavoriteTeam[]
  alerts         AlertPreference?
  subscription   Subscription?
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String?
  timezone    String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FavoriteTeam {
  id         String   @id @default(cuid())
  userId     String
  teamSlug   String
  teamName   String?
  conference String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamSlug])
}

model AlertPreference {
  id             String   @id @default(cuid())
  userId         String   @unique
  gameStart      Boolean  @default(true)
  finalScore     Boolean  @default(true)
  recruiting     Boolean  @default(false)
  breakingNews   Boolean  @default(false)
  nightlyDigest  Boolean  @default(false)
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  tier                 SubscriptionTier   @default(FREE)
  status               SubscriptionStatus @default(INACTIVE)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  currentPeriodEnd     DateTime?
  updatedAt            DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
